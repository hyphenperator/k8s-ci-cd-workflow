name: CI-CD Pipeline

on:
  pull_request:
    types:
      - closed  # Runs only when a PR is merged

jobs:
  debug-secrets:
    runs-on: ubuntu-20.04  
    if: github.repository == 'hyphenperator/k8s-ci-cd-workflow'  # Ensures it runs only in the main repo
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Print Available Secrets (DEBUG)
        run: |
          echo "#### DEBUGGING SECRETS ####"
          echo "AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'"
          echo "AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'"
          echo "AWS_REGION: '${{ secrets.AWS_REGION }}'"
          echo "AWS_ACCOUNT_ID: '${{ secrets.AWS_ACCOUNT_ID }}'"
          echo "EKS_CLUSTER_NAME: '${{ secrets.EKS_CLUSTER_NAME }}'"

  build-test:
    needs: debug-secrets  # Ensure secrets are validated before proceeding
    if: github.repository == 'hyphenperator/k8s-ci-cd-workflow' && github.event.pull_request.merged == true
    runs-on: ubuntu-20.04  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        working-directory: my-node-app
        run: npm install

      - name: Run Linting
        working-directory: my-node-app
        run: npm run lint || true

      - name: Run Unit Tests
        working-directory: my-node-app
        run: npm test || true

  build-and-push:
    needs: build-test  # Only run if build-test is successful
    runs-on: ubuntu-20.04  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables (FORCE SECRETS)
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "EKS_CLUSTER_NAME=${{ secrets.EKS_CLUSTER_NAME }}" >> $GITHUB_ENV

      - name: Install AWS CLI & Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y awscli docker jq

      - name: Configure AWS Credentials (FORCED ENV VARS)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/node-app:${{ github.sha }} -f my-node-app/Dockerfile my-node-app/
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/node-app:${{ github.sha }}

  deploy:
    needs: build-and-push  # Only run if build-and-push is successful
    runs-on: ubuntu-20.04  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install AWS CLI & Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y awscli kubectl jq

      - name: Configure AWS Credentials (FORCED ENV VARS)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      - name: Configure Kubernetes Authentication
        run: |
          aws eks --region us-east-1 update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/node-app-deployment.yaml
          kubectl apply -f k8s/node-app-service.yaml
          kubectl apply -f k8s/ingress.yaml  

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/node-app node-app=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/node-app:${{ github.sha }}
          kubectl rollout status deployment/node-app
